# We could verify the AllStar image with something like:
#   cosign verify ghcr.io/ossf/allstar:v4.0-busybox \
#     --certificate-identity-regexp  "https://github.com/ossf/allstar/.github/workflows/release.yaml"  
#     --certificate-oidc-issuer https://token.actions.githubusercontent.com
# but it's a fairly uninteresting verification since it only shows the image was 
# generated through GitHub Actions, not signed by one of the committers.
# More: https://github.blog/2021-12-06-safeguard-container-signing-capability-actions/
---
name: GSA-TTS AllStar Enforcement Action

# See https://github.com/GSA-TTS/.allstar/blob/main/ADMIN.md for information
# on setup and administration of this GHA.

on:
  push:
    branches:
      - main
  schedule:
    - cron: '7 * * * *'

jobs:
  deployment:
    runs-on: ubuntu-latest
    # Use chainguard/busybox based image - It has a tail for entrypoint
    container: 
      # specifying allstar by sha since tags are mutable. we don't verify the signature (see above)
      image: ghcr.io/ossf/allstar@sha256:1f3b9d7bf8490f17f1c114781085a92124e187c7e59db53b1e8a996d85c36445 # v4.0-busybox
      # Running as root within unprivileged container does not violate STIGs, etc.
      options: --user root
    environment: prod
    env:
      ARTIFACT_DIR: /tmp/artifacts
    steps:
      - name: Create Artifact Directory
        run: mkdir $ARTIFACT_DIR
      - name: Run AllStar Policy Check
        env:
          # Ping open issues every week (168 hours)
          NOTICE_PING_DURATION_HOURS: 168
          DO_NOTHING_ON_OPT_OUT: true # consistent with https://github.com/ossf/allstar/blob/main/app-prod.yaml#L12
          ALLSTAR_LOG_LEVEL: info
          KEY_SECRET: direct
          APP_ID: ${{ vars.APP_ID }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        # AllStar emits logs on stderr, not stdout
        run: | 
          /ko-app/allstar -once > >(tee -a $ARTIFACT_DIR/allstar.out) 2> >(tee -a $ARTIFACT_DIR/allstar.log >&2);
            - name: 'Setup jq'
      - name: Install JQ
        uses: dcarbone/install-jq-action@v2
      - name: Summarize Results
        run: |
          grep '^{}' $ARTIFACT_DIR/allstar.out | 
            jq --slurp \
            '[.[] | select(.enabled == true and
            .message == "Policy run result." and .result == false) ] |
            [ group_by(.area)[] | {(.[0].area): [ .[] | .repo]}]' | tee $ARTIFACT_DIR/by_area.json
          grep '^{}' $ARTIFACT_DIR/allstar.out | 
            jq --slurp \
            '[.[] | select(.enabled == true and
            .message == "Policy run result." and .result == false) ] |
            [ group_by(.repo[] | {(.[0].repo): [ .[] | .area]}]' | tee $ARTIFACT_DIR/by_repo.json
      - name: Archive AllStar Results
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # @4.3.1
        with:
          name: allstar-artifacts
          path: ${{ env.ARTIFACT_DIR }}
